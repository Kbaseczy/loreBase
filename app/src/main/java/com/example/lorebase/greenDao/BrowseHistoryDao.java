package com.example.lorebase.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.example.lorebase.bean.BrowseHistory;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BROWSE_HISTORY".
*/
public class BrowseHistoryDao extends AbstractDao<BrowseHistory, Long> {

    public static final String TABLENAME = "BROWSE_HISTORY";

    /**
     * Properties of entity BrowseHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id_browse = new Property(0, Long.class, "id_browse", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Link = new Property(2, String.class, "link", false, "LINK");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
    }


    public BrowseHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public BrowseHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BROWSE_HISTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id_browse
                "\"TITLE\" TEXT UNIQUE ," + // 1: title
                "\"LINK\" TEXT," + // 2: link
                "\"DATE\" TEXT);"); // 3: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BROWSE_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BrowseHistory entity) {
        stmt.clearBindings();
 
        Long id_browse = entity.getId_browse();
        if (id_browse != null) {
            stmt.bindLong(1, id_browse);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(3, link);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BrowseHistory entity) {
        stmt.clearBindings();
 
        Long id_browse = entity.getId_browse();
        if (id_browse != null) {
            stmt.bindLong(1, id_browse);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(3, link);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BrowseHistory readEntity(Cursor cursor, int offset) {
        BrowseHistory entity = new BrowseHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id_browse
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // link
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BrowseHistory entity, int offset) {
        entity.setId_browse(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLink(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BrowseHistory entity, long rowId) {
        entity.setId_browse(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BrowseHistory entity) {
        if(entity != null) {
            return entity.getId_browse();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BrowseHistory entity) {
        return entity.getId_browse() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
